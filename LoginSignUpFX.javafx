package com.example.architectureproject;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

import java.sql.*;
import java.util.Scanner;

public class LoginSignupFX extends Application {

    private Connection connection;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        // Initialize database connection
        String connectionString = "jdbc:postgresql://localhost:5432/postgres";
        String username = "postgres";
        String password = "Seisagatova20082020^^";

        try {
            connection = DriverManager.getConnection(connectionString, username, password);
        } catch (SQLException e) {
            System.err.println("Database connection error: " + e.getMessage());
            System.exit(1);
        }

        primaryStage.setTitle("Login/Signup Example");

        GridPane grid = new GridPane();
        grid.setPadding(new Insets(20, 20, 20, 20));
        grid.setVgap(10);
        grid.setHgap(10);

        TextField loginUsernameField = new TextField();
        loginUsernameField.setPromptText("Username");
        GridPane.setConstraints(loginUsernameField, 0, 0);

        PasswordField loginPasswordField = new PasswordField();
        loginPasswordField.setPromptText("Password");
        GridPane.setConstraints(loginPasswordField, 0, 1);

        Button loginButton = new Button("Login");
        GridPane.setConstraints(loginButton, 1, 0);
        loginButton.setOnAction(e -> {
            String usernameInput = loginUsernameField.getText();
            String passwordInput = loginPasswordField.getText();

            try {
                Connection connection = DriverManager.getConnection(connectionString, username, password);
                signup(connection, usernameInput, passwordInput);

                // Perform login
                connection.close();

            } catch (SQLException ex) {
                System.err.println("Login error: " + ex.getMessage());
            }
        });

        grid.getChildren().addAll(loginUsernameField, loginPasswordField, loginButton);

        Scene scene = new Scene(grid, 300, 150);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private boolean login(String username, String password) throws SQLException {
        String loginSQL = "SELECT * FROM database WHERE username = ? AND password = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(loginSQL)) {
            preparedStatement.setString(1, username);
            preparedStatement.setString(2, password);
            ResultSet resultSet = preparedStatement.executeQuery();
            return resultSet.next();
        }
    }
    private static void signup(Connection connection, String username, String password) throws SQLException {
        String signupSQL = "INSERT INTO database (username, password) VALUES ( ?, ?)";
        try (PreparedStatement preparedStatement = connection.prepareStatement(signupSQL)) {
            preparedStatement.setString(1, username);
            preparedStatement.setString(2, password);
            preparedStatement.executeUpdate();
            System.out.println("Signup successful!");
        } catch (SQLIntegrityConstraintViolationException e) {
            System.out.println("Username already exists. Please choose a different username.");
        }
    }

    @Override
    public void stop() {
        try {
            if (connection != null && !connection.isClosed()) {
                connection.close();
            }
        } catch (SQLException e) {
            System.err.println("Error closing database connection: " + e.getMessage());
        }
    }
}
